package school.programmers.l3;

public class MobisMentor {

	public static void main(String[] args) {
		//멘토 n명(k<=n<=20), 상담유형 1~k(1~5), 상담시간은 참가자가 결정(reqs의 원소는 [a, b, c] a시간에 요청해서 b분동안 c유형 상담 요청)(1<=a<=1000, 1 ≤ b ≤ 100, 1 ≤ c ≤ k), 요청은 a기준으로 오름차순 정렬, a중복 없음
		
		//0. <참가자 수>와 참가자별 상담 <상담유형><요청시간><시간> 그리고 상담자 수<n>가 먼저 정해져있을 때 상담자의 유형을 적절히 배치해 대기시간을 최소로 줄여야함
		//1. 참가자 상담 요청(상담유형, 상담시간)
		//2. 멘토 상태가 노상담인거 선택
		//3. 노상담중 상담유형 맞는거 선택
		//4. 노상담&상담유형이 없으면 대기(대기시간도 만들어야됨)
		//5. 노상담$상담유형 같은 상담사는 대기중인 참가자가 있을 경우 가장 먼저온 참가자부터 상담 진행
		
		
		
		//여기까지 보면 멘토는 상담/노상담 상태, 상담유형값을 가지고 있어야함(상담끝나는시간을 갖고있을지는 나중에 결정하자...)
		//참가자는 상담유형, 상담시간을 갖고 있어야함
		//참가자의 상담유형 별로 대기열 만들어줄 객체 (리스트맵이든 배열이든) 필요
		//상담자별 상담 끝나는 시간도 갖고있으면 좋을듯...??
		
		
		
		
		//=========== 요청 별 대기시간 ===========//
		//대기시간 = 상담유형 별 최소 남은 시간
		//      = 상담유형&상담자 별 남은시간 중 최소시간
		//      = 상담유형&상담자 (상담시작시각 - 현재시각 + 상담시간)의 최소시간이 가장 낮은(빠른) 시간 + 내앞에온 요청자의 상담시간 (if 남은 상담사가 있으면 0)
		//
		//상담시간은 이미 정해진거고 현재시각은 요청 들어온 시간이라 정해진거고 ->>> 상담시작시간을 당겨야함(이걸 상담자의 유형으로 조절)
		
		//
		
		
		
		//=========== 상담자 별 요구하는 대기시간 ===========//
		//만약 '상담'이라는 객체를 따로 만들면?? 상담의 갯수는 n, 유형별 상담은 유형중 n
		//요청이 오면 바로 특정 상담사(상담유형이 같은 것 중 소요시간이 가장 짧은 상담)에 연결하는 구조
		//최소시간이 나오게 유형만 결정하기때문에 각각의 요청시간을 따로 구분할 필요가 없음
		//요청자별 요구시간의 총합(∑)중 가장 작은 값을갖는 상담에 매칭
		//그냥 무지성으로 
		
		//요청이 들어올 때마다 상담을 만들거나 상담이 시작됬을 때만 상담을 만들거나에 따라서 많이 달라짐
		//'상담' 기능 -> 멘토와 참가자 연결, 시작 종료시간 설정(시작 종료시간 여기서 미리 계산하면 '남은시간'은 (종료시간 - 현제시간)이 됨)
		
		
		
		//아니면 통계적으로 계산해서???
		//상담유형 별 
		
	}

}
